MODULE main

VAR


------------------- Environment and State variables --------------------
pdu_session_establishment_requested	:	boolean;	
process_initiated	:	boolean;	
sm_context_request	:	boolean;	
sm_context_request_success	:	boolean;	
sm_context_response	:	boolean;	
sm_context_response_success	:	boolean;	
n4_session_request	:	boolean;	
n4_session_request_success	:	boolean;	
n4_session_response	:	boolean;	
n4_session_response_success	:	boolean;	
nsmf_pdu_session_request	:	boolean;	
nsmf_pdu_session_response_success	:	boolean;	
nsmf_pdu_session_response	:	boolean;	
nsmf_message_transfer	:	boolean;	
n2_pdu_session_request	:	boolean;	
n2_pdu_session_request_success	:	boolean;	
n2_pdu_session_ACK	:	boolean;	
n2_pdu_session_ACKed	:	boolean;	

----------------- Sequence numbers -------------------

---------------- state for visited_plmn state machine ----------------

visited_plmn_state	:
{
	no_session,
	session_establishment_requested,
	sm_context_requested,
	sm_context_complete,
	n4_session_requested,
	n4_session_complete,
	nsmf_pdu_requested,
	nsmf_pdu_complete,
	n2_pdu_requested,
	session_establishment_successful
};
------------ Possible visited_plmn actions ----------------

visited_plmn_action	:
{
	visited_plmn_establish_request,
	visited_plmn_send_sm_context_request,
	visited_plmn_rcv_sm_context_response,
	visited_plmn_null_action,
	visited_plmn_send_n4_request,
	visited_plmn_rcv_n4_response,
	visited_plmn_request_nsm_pdu,
	visited_plmn_rcv_nsm_pdu_response,
	visited_plmn_request_n2_pdu,
	visited_plmn_n2_request_acked
};


DEFINE

-----------------visited_plmn transitions --------------------
T1_T1	:=	 (visited_plmn_state = no_session & 
                        pdu_session_establishment_requested
                    )	;
T2_T2	:=	 (visited_plmn_state = session_establishment_requested & 
                        process_initiated & sm_context_request_success
                    )	;
T3_T3	:=	 (visited_plmn_state = sm_context_requested & 
                        process_initiated & sm_context_request & sm_context_response_success
                    )	;
failure_T4	:=	 (visited_plmn_state = sm_context_requested & 
                        process_initiated & sm_context_request & !sm_context_response_success
                    )	;
T4_T5	:=	 (visited_plmn_state = sm_context_complete & 
                        process_initiated & sm_context_request & sm_context_response & n4_session_request_success
                    )	;
T5_T6	:=	 (visited_plmn_state = n4_session_requested & 
                        process_initiated & sm_context_request & sm_context_response & n4_session_request & n4_session_response_success
                    )	;
T6_T7	:=	 (visited_plmn_state = n4_session_complete & 
                        process_initiated & sm_context_request & sm_context_response & n4_session_request & n4_session_response
                    )	;
T7_T8	:=	 (visited_plmn_state = nsmf_pdu_requested & 
                        process_initiated & sm_context_request & sm_context_response & n4_session_request & n4_session_response & nsmf_pdu_session_request & nsmf_pdu_session_response_success
                    )	;
T8_T9	:=	 (visited_plmn_state = nsmf_pdu_complete & 
                        process_initiated & sm_context_request & sm_context_response & n4_session_request & n4_session_response & nsmf_pdu_session_request & nsmf_pdu_session_response & nsmf_message_transfer & n2_pdu_session_request_success
                    )	;
T9_T10	:=	 (visited_plmn_state = n2_pdu_requested & 
                        process_initiated & sm_context_request & sm_context_response & n4_session_request & n4_session_response & nsmf_pdu_session_request & nsmf_pdu_session_response & nsmf_message_transfer & n2_pdu_session_request & n2_pdu_session_ACKed
                    )	;

------------------- Noisy Channels --------------------

------------------- Adversary enabled or not --------------------


ASSIGN


------------------- Adversarial state machines --------------------


---------------visited_plmn state machine ------------------

init(visited_plmn_state)	:=no_session;

next(visited_plmn_state)	:=	 case

(T1_T1 )	:	session_establishment_requested	;
(T2_T2 | failure_T4 )	:	sm_context_requested	;
(T3_T3 )	:	sm_context_complete	;
(T4_T5 )	:	n4_session_requested	;
(T5_T6 )	:	n4_session_complete	;
(T6_T7 )	:	nsmf_pdu_requested	;
(T7_T8 )	:	nsmf_pdu_complete	;
(T8_T9 )	:	n2_pdu_requested	;
(T9_T10 )	:	session_establishment_successful	;
TRUE	:	visited_plmn_state	;
esac	;


init(visited_plmn_action)	:= visited_plmn_null_action	;

next(visited_plmn_action)	:=	 case

(T1_T1 )	:	visited_plmn_establish_request	;
(T2_T2 )	:	visited_plmn_send_sm_context_request	;
(T3_T3 )	:	visited_plmn_rcv_sm_context_response	;
(failure_T4 )	:	visited_plmn_null_action	;
(T4_T5 )	:	visited_plmn_send_n4_request	;
(T5_T6 )	:	visited_plmn_rcv_n4_response	;
(T6_T7 )	:	visited_plmn_request_nsm_pdu	;
(T7_T8 )	:	visited_plmn_rcv_nsm_pdu_response	;
(T8_T9 )	:	visited_plmn_request_n2_pdu	;
(T9_T10 )	:	visited_plmn_n2_request_acked	;
TRUE	:	visited_plmn_null_action	;
esac	;


init(process_initiated)	:= FALSE	;

next(process_initiated)	:=	 case
(T1_T1 )	:	TRUE	;
TRUE	:	process_initiated	;
esac	;



init(sm_context_request)	:= FALSE	;

next(sm_context_request)	:=	 case
(T2_T2 )	:	TRUE	;
TRUE	:	sm_context_request	;
esac	;



init(sm_context_response)	:= FALSE	;

next(sm_context_response)	:=	 case
(T3_T3 )	:	TRUE	;
TRUE	:	sm_context_response	;
esac	;



init(n4_session_request)	:= FALSE	;

next(n4_session_request)	:=	 case
(T4_T5 )	:	TRUE	;
TRUE	:	n4_session_request	;
esac	;



init(n4_session_response)	:= FALSE	;

next(n4_session_response)	:=	 case
(T5_T6 )	:	TRUE	;
TRUE	:	n4_session_response	;
esac	;



init(nsmf_pdu_session_request)	:= FALSE	;

next(nsmf_pdu_session_request)	:=	 case
(T6_T7 )	:	TRUE	;
TRUE	:	nsmf_pdu_session_request	;
esac	;



init(nsmf_pdu_session_response)	:= FALSE	;

next(nsmf_pdu_session_response)	:=	 case
(T7_T8 )	:	TRUE	;
TRUE	:	nsmf_pdu_session_response	;
esac	;



init(n2_pdu_session_request)	:= FALSE	;

next(n2_pdu_session_request)	:=	 case
(T8_T9 )	:	TRUE	;
TRUE	:	n2_pdu_session_request	;
esac	;



init(n2_pdu_session_ACK)	:= FALSE	;

next(n2_pdu_session_ACK)	:=	 case
(T9_T10 )	:	TRUE	;
TRUE	:	n2_pdu_session_ACK	;
esac	;


--- The process begins once the request for it is issued.
LTLSPEC process_initiated -> O(pdu_session_establishment_requested)

--- Purposely wrong. Says that a message will get a response if it's issued.
LTLSPEC sm_context_request -> (n4_session_request & !n4_session_request)